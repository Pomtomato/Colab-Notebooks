{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOZJlmRJfwxP8WPAXTSqPBH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# @title Class & Inheritence\n","class Person():\n","  amount = 0 # class variable, this will not be changed by Person objects\n","             # not unique for each created object/ same for every created object\n","  def __init__(self, name, age):\n","    self.name = name\n","    self.age = age\n","    Person.amount += 1\n","\n","  def __del__(self):\n","    Person.amount -= 1\n","\n","  def __str__(self):\n","    return f\"This persons name is {self.name}, age is {self.age}, and {Person.amount}th person in line\"\n","\n","  def gets_older(self, years):\n","    self.age += years\n","\n","class Worker(Person):\n","\n","  def __init__(self, name, age, salary):\n","    super(Worker, self).__init__(name, age)\n","    self.salary = salary\n","    Person.amount += 1\n","\n","  def __str__(self):\n","    text = super(Worker, self).__str__()\n","    text += f\", salary {self.salary}\"\n","    return text\n","     #return f\"This persons name is {self.name}, age is {self.age}, and {Person.amount}th person in line and earns {self.salary}\"\n","\n","  def yearly_salary(self):\n","    return self.salary * 12\n","\n","class Vector():\n","  def __init__(self, x, y):\n","    self.x = x\n","    self.y = y\n","\n","  def __str__(self):\n","    return f\"x:{self.x}, y:{self.y}\"\n","\n","  def __add__(self, other):\n","    return (self.x + other.x, self.y + other.y)\n","\n","  def __sub__(self, other):\n","    return (self.x - other.x, self.y - other.y)"],"metadata":{"cellView":"form","id":"IrTyT9uPQZVd"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"1AlMVR9-QSIG","executionInfo":{"status":"ok","timestamp":1693749644708,"user_tz":-360,"elapsed":2,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"a01785c1-cab9-48c9-8378-a663f164ebaf"},"outputs":[{"output_type":"stream","name":"stdout","text":["This persons name is Mike, age is 30, and 1th person in line\n","This persons name is bob, age is 20, and 2th person in line\n","2\n","2\n"]}],"source":["# @title\n","person1 = Person('Mike', 30)\n","print(person1)\n","person2 = Person('bob', 20)\n","print(person2)\n","\n","print(Person.amount)\n","#del person1\n","print(Person.amount)"]},{"cell_type":"code","source":["# @title\n","worker1 = Worker('Henry', 40, 10000)\n","worker2 = Worker('Joe', 30, 5000)\n","print(worker1)\n","print(Person.amount)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"6jWIM2XlS1ol","executionInfo":{"status":"ok","timestamp":1693749647582,"user_tz":-360,"elapsed":2,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"90f9694d-dadf-4691-c8f5-2504396e5efc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["This persons name is Henry, age is 40, and 4th person in line, salary 10000\n","4\n"]}]},{"cell_type":"code","source":["# @title\n","v1 = Vector(2,5)\n","v2 = Vector(3,3)\n","print(v1, v2)\n","v3 = v1 + v2\n","print(v3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"WCLEcV9BT5r0","executionInfo":{"status":"ok","timestamp":1693749967771,"user_tz":-360,"elapsed":2,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"1f893118-15a4-41c5-efcc-04d84030fa8f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x:2, y:5 x:3, y:3\n","(5, 8)\n"]}]},{"cell_type":"code","source":["# @title Multithreading\n","# execute multiple tasks at the same time on multiple threads\n","# multiple thread in the same process share the same memory space; so they can communicate better\n","import threading\n","\n","# useful cases example: video games where multiple processes like\n","# user input, sound, interaction, video render etc need to be\n","# executed simultaneously or parallaly\n","\n","# the script that we are running is alread running on a 'main thread',\n","# and any additional threads that are defined and start() will run parallel to main thread\n","# so if we want a thread to stop and then run the next thread we will need join() method"],"metadata":{"id":"SLu7oJtrXiaX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title\n","def function1():\n","  for x in range(50):\n","    print(f\"{x}: function1\")\n","\n","def function2():\n","  for x in range(50):\n","    print(f\"{x}: function2\")\n","\n","t1 = threading.Thread(target = function1)\n","t2 = threading.Thread(target = function2)\n","t1.start()\n","#t1.join()\n","t2.start()\n","#t2.join()\n","\n","# if we let all defined threads run in parallel, than they will\n","# so fast that the print statements may not show in order\n","print(\"text\")"],"metadata":{"id":"19g0AwdfbqWP","executionInfo":{"status":"error","timestamp":1696869544051,"user_tz":-360,"elapsed":800,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"07002040-d5ff-4ffe-d52b-0d9183c4cd07","colab":{"base_uri":"https://localhost:8080/","height":253}},"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-de88998aff60>\u001b[0m in \u001b[0;36m<cell line: 10>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{x}: function2\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mt1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mthreading\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mThread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mt2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mthreading\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mThread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mt1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'threading' is not defined"]}]},{"cell_type":"code","source":["# @title Synchronizing Threads\n","# we saw above that multithreading runs processes parallely.\n","# Now if we have a file that we are changing on one thread,\n","# and reading on another thread; then the values might get jumbled up since threads are running so fast parallely\n","# thus the threads will counteract each other\n","import time\n","\n","x = 8192\n","lock = threading.Lock() # lock down access to thread where a function is executing\n","\n","\n","def double():\n","  global x, lock # if we want to manipulate a variable declared outside of the function\n","\n","  lock.acquire() # this will try to acquire the thread, if its free.\n","  # if a thread is already locked by another function then we can not acquire it until it free/ done executing\n","\n","  while x < 16384:\n","    x *= 2\n","    print(x)\n","    time.sleep(1)\n","  print(\"reached the max\")\n","  lock.release()\n","\n","def halve():\n","  global x, lock\n","  lock.acquire()\n","  while x > 1:\n","    x /= 2\n","    print(x)\n","    time.sleep(1)\n","  print(\"reached the minimum\")\n","  lock.release()\n","\n","\n","t1 = threading.Thread(target=double)\n","t2 = threading.Thread(target=halve)"],"metadata":{"cellView":"form","id":"d4aDz6cjemC3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title\n","# buggy here, try on PC\n","t2.start()\n","t1.start()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"ZY2SLZ46gnfH","executionInfo":{"status":"ok","timestamp":1693753498746,"user_tz":-360,"elapsed":2,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"145911dc-77d1-44bc-c72c-b0f8fc6da261"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4096.0\n"]}]},{"cell_type":"code","source":["# @title\n","semaphore = threading.BoundedSemaphore(value=5)\n","# semaphore doesn't lock the resource completely, but limits the access\n","# so multiple thread can access a resource but not unlimited\n","def access(thread_number):\n","  print(f\"{thread_number} is trying to access\")\n","  semaphore.acquire()\n","  print(f\"{thread_number} was granted access\")\n","  time.sleep(10)\n","  print(f\"{thread_number} is now releasing\")\n","  semaphore.release()\n","\n","for thread_number in range(1,11):\n","  t = threading.Thread(target=access, args=(thread_number,))\n","  t.start()\n","  time.sleep(1)\n","\n","# in the output we see after 5 threads were granted access,\n","# further threads were not allowed access to the resource untill\n","# the previous thread access is released\n","# so the 6-10 were trying to access and was finally granted access\n","# when time=10sec passed, and thread1 released access"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"t4PTnLl4kF0n","executionInfo":{"status":"ok","timestamp":1693754202509,"user_tz":-360,"elapsed":9824,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"6c686499-b374-488a-d9c7-b2c5a68270ff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 is trying to access\n","1 was granted access\n","2 is trying to access\n","2 was granted access\n","3 is trying to access\n","3 was granted access\n","4 is trying to access\n","4 was granted access\n","5 is trying to access\n","5 was granted access\n","6 is trying to access\n","7 is trying to access\n","8 is trying to access\n","9 is trying to access\n","10 is trying to access\n","1 is now releasing\n","6 was granted access\n"]}]},{"cell_type":"code","source":["# @title Events\n","event = threading.Event()\n","\n","def myFunction():\n","  print(\"Waiting for event to trigger...\\n\")\n","  event.wait()\n","  print(\"WOW the event triggered!!\\n\")\n","\n","t1 = threading.Thread(target=myFunction)"],"metadata":{"cellView":"form","id":"puD_22bxne6h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title\n","t1.start()\n","x = input(\"So you want to trigger the event? (y/n)\\n\")\n","if x == \"y\":\n","  event.set()\n","\n","# here we see that t1 thread was waiting,\n","# but main thread executed the 'input' command parallely to t1 thread"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"JniNTbi-oyzv","executionInfo":{"status":"ok","timestamp":1693754662212,"user_tz":-360,"elapsed":8309,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"39c10df8-d8da-4c83-e82f-675fa7b9ee49"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Waiting for event to trigger...\n","\n","So you want to trigger the event? (y/n)\n","y\n","WOW the event triggered!!\n","\n"]}]},{"cell_type":"code","source":["# @title Daemon Threads\n","# Daemon thread are threads that keep running in the background\n","# EVEN IF the main script is terminated,\n","# or EVEN IF the programme is waiting for a few threads to stop running, so the next threads can run\n","# so no one waits for Daemon threads, and Daemon threads wait for none\n","#"],"metadata":{"cellView":"form","id":"nZ7ugg_Xopfh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title\n","path = \"/content/text.txt\"\n","text = \"\"\n","\n","def readFile():\n","  global path, text\n","  while True: # endless loop\n","    with open(path, \"r\") as f:\n","      text = f.read()\n","    time.sleep(3)\n","\n","def printloop():\n","  for x in range(30):\n","    print(text)\n","    time.sleep(1)\n","\n","t1 = threading.Thread(target=readFile, daemon=True)\n","t2 = threading.Thread(target=printloop)\n"],"metadata":{"cellView":"form","id":"yZmKORXDpw4g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t1.start()\n","t2.start()\n","# run it on pc, doesn't work in colab"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lOkI8VZjr8rI","executionInfo":{"status":"ok","timestamp":1693755479888,"user_tz":-360,"elapsed":358,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"9ff02ccb-1250-44c8-f47d-a524bea3c65c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello World!!\n"]}]},{"cell_type":"code","source":["# @title Queue\n","import queue\n","\n","numbers = [10,20,30,40,50,60,70]\n","q = queue.Queue()\n","que = queue.LifoQueue()\n","qu = queue.PriorityQueue()\n","for num in numbers:\n","  # FIFO queue\n","  q.put(num)\n","  # LIFO queue/ stack\n","  que.put(num)\n","\n","# Priorty Queue\n","qu.put((2, \"Hello World\"))\n","qu.put((11, 99))\n","qu.put((5, 7.5))\n","qu.put((1, True))\n","\n","while not q.empty():\n","  print(q.get())\n","  # FIFO queue\n","print(\"-----------------\")\n","while not que.empty():\n","    print(que.get())\n","  # LIFO queue/ stack\n","print(\"-----------------\")\n","while not qu.empty():\n","  print(qu.get()[1])\n","\n"],"metadata":{"cellView":"form","id":"qTuPObAAT-kT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title Sockets and Network Programming\n","# socket is basically an end point to receive data\n","# Network programming - how client(socket) and server(socket) will interact with each other\n","# TCP, UDP, FTP, HTTP etc type of protocals\n","# TCP trasnfers accurate data, but slower (good for messsages)\n","# UDP transfers data faster, but risk losing some data (good for skype, multiplayer)\n","# also pick which IP I want to use from my pc\n","import socket\n"],"metadata":{"id":"eqnibgyQYUY4","cellView":"form"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title\n","#                (internet socket, tcp protocol)\n","s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n","s.bind(('127.0.0.1', 55555)) # run this on your local machine\n","s.listen() # socket is listening for any possible connections\n","\n","\n","'''This is the server script'''\n","while True():\n","  client, address = s.accept()\n","  # accept a client when client tries to connect to socket\n","  # store the client and its address\n","  print(\"Connected to ()\".format(address))\n","  client.send(\"You are connected\".encode()) # send feedback to client\n","  client.close() # close current client, so that we don't have unlimited clients running in background\n"],"metadata":{"id":"ChexnUgDZucn","cellView":"form"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title\n","'''This is the client script'''\n","s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n","s.connect(('127.0.0.1', 55555)) # (Local_Host_IP_address, port)\n","\n","message = s.receive(1024) # receive 1024 bytes\n","print(message.decode())\n"],"metadata":{"id":"cpbmvVg5cKel","cellView":"form"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title Database Programming\n","import sqlite3\n","\n","# if there exists a database then connect to it, if it doesn't then create new database\n","\n","connection = sqlite3.connect('/content/mydata.db')\n","cursor = connection.cursor() # call a interface to interact with database\n"],"metadata":{"cellView":"form","id":"VUKJVwzjgTXM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title\n","cursor.execute('''\n","CREATE TABLE IF NOT EXISTS persons (\n","  id INTEGER PRIMARY KEY,\n","  first_name TEXT,\n","  last_name TEXT,\n","  age INTEGER\n",")\n","''')\n","# this execute command stays in the connection pipeline\n","# and finally applies when we apply commit\n","\n","connection.commit()\n"],"metadata":{"cellView":"form","id":"AVoZE27LhfcD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title\n","cursor.execute('''\n","INSERT INTO persons VALUES\n","(1,'Paul', 'Smith', 24),\n","(2,'Mark', 'Jhonson', 30),\n","(3,'Anne', 'Smith', 34)\n","''')\n","cursor.execute('''\n","SELECT * FROM persons\n","WHERE last_name = 'Smith'\n","''')\n","# rows = cursor.fetchall()\n","# print(rows)\n","\n","connection.commit()\n","connection.close()"],"metadata":{"cellView":"form","id":"D45m5OGVhofz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title\n","class Person():\n","  def __init__(self, id_num=-1, first=\"\", last=\"\", age=-1):\n","    self.id_num = id_num\n","    self.first = first\n","    self.last = last\n","    self.age = age\n","    self.connection = sqlite3.connect('/content/mydata.db')\n","    self.cursor = self.connection.cursor()\n","\n","  def load_person(self, id_num):\n","    self.cursor.execute('''\n","    SELECT * FROM persons\n","    WHERE id = {}\n","    '''.format(id_num))\n","\n","    results = self.cursor.fetchone()\n","\n","    self.id_num = id_num\n","    self.first = results[1]\n","    self.last = results[2]\n","    self.age = results[3]\n","\n","  def insert_person(self):\n","    self.cursor.execute('''\n","    INSERT INTO persons VALUES\n","    (\"{}\", \"{}\", \"{}\", {})\n","    '''.format(self.id_num, self.first, self.last, self.age))\n","    self.connection.commit()\n","    self.connection.close()"],"metadata":{"cellView":"form","id":"AJpmmPKakq0K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title\n","# Load a person from the database\n","p1 = Person()\n","p1.load_person(1)\n","print(p1.first)\n","print(p1.last)\n","print(p1.age)\n","print(p1.id_num)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"aCjhjgc7ntHo","executionInfo":{"status":"ok","timestamp":1693839844232,"user_tz":-360,"elapsed":2,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"b46a95e5-8778-4980-ce79-50e117bb0587"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Paul\n","Smith\n","24\n","1\n"]}]},{"cell_type":"code","source":["# @title\n","# insert a person into the database\n","p1 = Person(7, \"Alex\", \"Robins\", 37)\n","p1.insert_person()"],"metadata":{"cellView":"form","id":"i-5g9Gp3rYlh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title\n","connection = sqlite3.connect('/content/mydata.db')\n","cursor = connection.cursor()\n","cursor.execute(\"SELECT * FROM persons\")\n","results = cursor.fetchall()\n","print(results)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"U56Jy5-ks1_2","executionInfo":{"status":"ok","timestamp":1693839852623,"user_tz":-360,"elapsed":538,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"525a4eea-f7e1-4840-c91c-c179f569ba60"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 'Paul', 'Smith', 24), (2, 'Mark', 'Jhonson', 30), (3, 'Anne', 'Smith', 34), (7, 'Alex', 'Robins', 37)]\n"]}]},{"cell_type":"code","source":["connection.close()"],"metadata":{"id":"FCaDtSurs7iH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title Recursion\n","\n","# with loop-> 5! = 5 * 4 * 3 * 2 * 1\n","n = 7\n","fact = 1\n","while n > 0:\n","  fact *= n\n","  n -= 1\n","print(fact)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"rAnvLNX4uadW","executionInfo":{"status":"ok","timestamp":1693840194374,"user_tz":-360,"elapsed":3,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"e6dfb4d4-aa65-4433-8e66-61e113609fb1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5040\n"]}]},{"cell_type":"code","source":["# @title\n","# with recursion->\n","# 5! = 5 * 4! -> 5*4*3! -> 5*4*3*2! -> 5*4*3*2*1!\n","number = 1\n","def factorial(n):\n","  if n < 1:\n","    return 1\n","  else:\n","    number = n * factorial(n-1)\n","    #        7 * 6!\n","    return number\n","# n < 1 that recursed function returns 1,\n","# n = 1 that recursed function returns 1\n","# n = 2 that recursed function returns 2,\n","# n = 3 that recursed function returns 3\n","# n = 4 that recursed function returns 4,\n","# n = 5 that recursed function returns 5\n","# n = 6 that recursed function returns 6,\n","# n = 7 that function returns 7 -> and this one was the initial function call\n","# now they multiply\n","print(factorial(7))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"AZ6L0FnRvlXV","executionInfo":{"status":"ok","timestamp":1693840555154,"user_tz":-360,"elapsed":347,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"d9eaaaaa-b6d6-4baa-ea36-55fb3dd8d269"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5040\n"]}]},{"cell_type":"code","source":["# @title\n","# fibonacchi\n","def fibonacci_loop(n):\n","  a, b = 0, 1\n","  for x in range(n):\n","    a, b = b , a+b\n","  return a\n","\n","fibo = 0\n","def fibonacci(n):\n","  if n <= 1:\n","    return n\n","  else:\n","    return (fibonacci(n-1) + fibonacci(n-2))\n","\n","# initial call fibonacci(7)\n","# 7 -> f(6) + f(5) -> f(5)+f(4) + f(4)+f(3)\n","# -> f(4)+f(3) + f(3)+f(2) + f(3)+f(2) + f(2)+f(1)\n","# -> f(3)+f(2) + f(2)+f(1) + f(2)+f(1) + f(1)+f(0) + f(2)+f(1) + f(1)+f(0) + f(1)+f(0) + 1\n","# ->\n","# ->"],"metadata":{"cellView":"form","id":"Ge4oE2IKwroH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(fibonacci(7))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KkQWRaOGy_S9","executionInfo":{"status":"ok","timestamp":1693841792447,"user_tz":-360,"elapsed":3,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"8b52f490-37f9-4024-e814-2294dceec290"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["13\n"]}]},{"cell_type":"code","source":["print(fibonacci_loop(7))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mTg17ftp1HQD","executionInfo":{"status":"ok","timestamp":1693841656735,"user_tz":-360,"elapsed":355,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"71658185-4de7-41f2-f1bb-c61f17bab216"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["13\n"]}]},{"cell_type":"code","source":["# @title XML(Extensible Markup Language) processing\n","# alot of uses like building GUI's\n","#\n","# platform and application independent database system\n","# we can insert data into XML using python, then read it using JAVA vice-versa\n","# SAX module -> simple API for XML (limited manipulatibility) (use when we have limited memory/input)\n","# doesn't load the entire XML file to RAM\n","# DOM module -> Document Object Model"],"metadata":{"id":"lm_G8K282Qva","cellView":"form"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import xml.sax"],"metadata":{"id":"zexBlr4is905"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title SAX\n","# handler-> handles XML file\n","# handler = xml.sax.ContentHandler()\n","class groupHandler(xml.sax.ContentHandler):\n","\n","# we didn't define an __init__ method because this class will be\n","# initialized by xml.sax.ContentHandler class\n","# and we are changing a few methods within that class e.g. startElement, characters, endElement\n","  def startElement(self, name, attribute):\n","    #print(name)\n","    self.current = name\n","\n","    if self.current == \"person\":\n","      print(\"---------PERSON-----------\")\n","      print(\"ID: {}\".format(attribute['id']))\n","\n","  def characters(self, content):\n","    if self.current == \"name\":\n","      self.name = content\n","    elif self.current == \"age\":\n","      self.age = content\n","    elif self.current == \"weight\":\n","      self.weight = content\n","    elif self.current == \"height\":\n","      self.height = content\n","\n","  def endElement(self, name):\n","    if self.current == \"name\":\n","      print(\"Name: {}\".format(self.name))\n","    elif self.current == \"age\":\n","      print(\"Age: {}\".format(self.age))\n","    elif self.current == \"weight\":\n","      print(\"Weight: {}\".format(self.weight))\n","    elif self.current == \"height\":\n","      print(\"Height: {}\".format(self.height))\n","    self.current =\"\"\n","\n","# parser -> translates the XML file to python"],"metadata":{"cellView":"form","id":"K3_nC2iJsKp6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title\n","handler = groupHandler()\n","parser = xml.sax.make_parser()\n","parser.setContentHandler(handler)\n","parser.parse(\"/content/data.xml\")"],"metadata":{"cellView":"form","id":"7Xdr2YhstAGS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import xml.dom.minidom"],"metadata":{"id":"0MQVg_AH0FCS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title DOM\n","# DOM views data as a tree structure\n","# so for our example data.xml -> root = group, branch = person, leaf = name, age, weight, height\n","domtree = xml.dom.minidom.parse(\"/content/data.xml\")\n","group = domtree.documentElement\n","\n","persons = group.getElementsByTagName(\"person\")\n","for person in persons:\n","  print(\"-------------PERSON---------------\")\n","  if person.hasAttribute('id'):\n","    print(\"ID: {}\".format(person.getAttribute('id')))\n","\n","  print(\"Name: {}\".format(person.getElementsByTagName(\"name\")[0].childNodes[0].data))\n","  print(\"Age: {}\".format(person.getElementsByTagName(\"age\")[0].childNodes[0].data))\n","  print(\"Weight: {}\".format(person.getElementsByTagName(\"weight\")[0].childNodes[0].data))\n","  print(\"Height: {}\".format(person.getElementsByTagName(\"height\")[0].childNodes[0].data))"],"metadata":{"id":"aYsmxSI20JGA","cellView":"form"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title #####change entries/data of the XML file\n","# change entries/data of the XML file\n","persons[2].getElementsByTagName('name')[0].childNodes[0].nodeValue = \"New Name\"\n","persons[0].setAttribute('id', '100')\n","persons[1].getElementsByTagName('age')[0].childNodes[0].nodeValue = \"2000\""],"metadata":{"id":"WkncLpww3vpj","cellView":"form"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["domtree.writexml(open('/content/data.xml', 'w'))"],"metadata":{"id":"anQXWeWH441p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title #####create new entries\n","# create new entries\n","newperson = domtree.createElement('person')\n","newperson.setAttribute('id', '5')\n","\n","name = domtree.createElement('name')\n","name.appendChild(domtree.createTextNode('Paul Green'))\n","age = domtree.createElement('age')\n","age.appendChild(domtree.createTextNode('22'))\n","weight = domtree.createElement('weight')\n","weight.appendChild(domtree.createTextNode('60'))\n","height = domtree.createElement('height')\n","height.appendChild(domtree.createTextNode('170'))\n","\n","newperson.appendChild(name)\n","newperson.appendChild(age)\n","newperson.appendChild(weight)\n","newperson.appendChild(height)\n","\n","group.appendChild(newperson)"],"metadata":{"cellView":"form","id":"1ptTmodlCiHh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["domtree.writexml(open('/content/data.xml', 'w'))"],"metadata":{"id":"XYIVCIXZDyqB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title Logging\n","# logging helps to find problems, to avoid problems, to understand problems\n","# so when some programme doesn't work log messages will help to understand why it didn'dt woek\n","# and someone who knows what they are doing can look at the log and understand & fix the problem\n","# think of a computer os, there are a lot of log files being created behind the scenes\n","# different messages can be given different priorty levels\n","\n","# 5 security levels\n","# DEBUG- mainly used by developers to play around and fix bugs\n","# INFO- info messages like 'you have 17 mails', '2 users online' etc\n","# WARNING- nothing bad happened yet, but will happen if current situation persists e.g. 'You are running low on memory'\n","# ERROR- System keeps running but process halts to give error e.g.'couldn't perform an action because xyz reason'\n","# CRITICAL- When an essential part of your system is in danger e.g. 'server is down'\n","\n","# python can set the security level.\n","# So if security level=DEBUG, then python will show all log messages(DEBUG, INFO, WARNING, ERROR, CRITICAL)\n","# if security level=Warning, then log shown=(WARNING, ERROR, CRITICAL)\n","\n"],"metadata":{"id":"aVWqIcuUEa16"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import logging"],"metadata":{"id":"ex-xvuJ5FzbR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["logging.basicConfig(level=logging.DEBUG)\n","logging.info(\"You have 20 mails in your inbox\")\n","logging.critical(\"All system components have failed!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1tCPxyIeI6YJ","executionInfo":{"status":"ok","timestamp":1693897547006,"user_tz":-360,"elapsed":522,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"ddfdc996-98e0-426c-85b8-47d7ea16d378"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["CRITICAL:root:All system components have failed!\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"MPlzmZ5AKBmA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# @title #####create your own logger\n","logging.basicConfig(level=logging.DEBUG)\n","logger = logging.getLogger(\"MEME logger\")\n","logger.info(\"Yo ho! I see you have summoned me, the MEME logger \")\n","logger.log(logging.ERROR, \"An error occured!\")\n","logger.critical(\"imma destroy your system now\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"RqAZR334JXTB","executionInfo":{"status":"ok","timestamp":1693897549633,"user_tz":-360,"elapsed":337,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"958def76-a43c-4e73-90f7-be5c1676435b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["ERROR:MEME logger:An error occured!\n","CRITICAL:MEME logger:imma destroy your system now\n"]}]},{"cell_type":"code","source":["# @title #####Logger File Handler\n","# The previous log messages will continously keep changing on a system console acccording to situation\n","# but as a system admin, I will only want to look at the LOG FILES when something fails; not continously stare at log messages\n","logger.setLevel(logging.DEBUG) # logger will print down to DEBUG level messages\n","\n","handler = logging.FileHandler(\"/content/Mylog.log\")\n","handler.setLevel(logging.INFO) # but in LOG files only down to INFO level message will exist\n","\n","formatter = logging.Formatter(\"%(levelname)s - %(asctime)s: %(message)s\") # %(levelname)s -%(as)... these are keywords and not set by user\n","handler.setFormatter(formatter)\n","\n","logger.addHandler(handler)\n","\n","logger.debug(\"This is a debug message\")\n","logger.info(\"This is info message\")\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tqwxILTJJ47I","executionInfo":{"status":"ok","timestamp":1693898204683,"user_tz":-360,"elapsed":343,"user":{"displayName":"Abrar Raiyan","userId":"03612250197745345037"}},"outputId":"b1bbf37a-ab80-4476-a553-057347620882"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["DEBUG:MEME logger:This is a debug message\n","INFO:MEME logger:This is info message\n"]}]}]}